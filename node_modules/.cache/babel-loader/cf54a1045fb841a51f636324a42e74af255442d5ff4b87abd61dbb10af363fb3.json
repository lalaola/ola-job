{"ast":null,"code":"import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nexport const GET_REGIS = 'GET_REGIS';\nexport const GET_LOGIN = 'GET_LOGIN';\nexport const GET_LOGIN_GOOGLE = 'GET_LOGIN_GOOGLE';\nexport const GET_REGIS_GOOGLE = 'GET_REGIS_GOOGLE';\nexport const userLogin = data => {\n  const auth = getAuth();\n  console.log('2. loading masuk action');\n  return dispatch => {\n    // loading \n    dispatch({\n      type: GET_LOGIN,\n      payload: {\n        loading: true,\n        data: false,\n        errorMassage: false\n      }\n    });\n    // get Api \n    signInWithEmailAndPassword(auth, data.email, data.password).then(userCredential => {\n      // Signed in \n      const user = userCredential.user;\n      console.log(\"3.data masuk\", user);\n      dispatch({\n        type: GET_LOGIN,\n        payload: {\n          loading: false,\n          data: user,\n          errorMassage: false\n        }\n      });\n      // ...\n    }).catch(error => {\n      console.log(\"3.gagal\");\n      dispatch({\n        type: GET_LOGIN,\n        payload: {\n          loading: false,\n          data: false,\n          errorMassage: error\n        }\n      });\n    });\n  };\n};\nexport const googleUserRegis = () => {\n  const auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  console.log('2. loading masuk action');\n  return dispatch => {\n    // loading \n    dispatch({\n      type: GET_REGIS_GOOGLE,\n      payload: {\n        loading: true,\n        data: false,\n        errorMassage: false\n      }\n    });\n    // get Api \n    signInWithPopup(auth, provider).then(result => {\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      const user = result.user;\n      dispatch({\n        type: GET_REGIS_GOOGLE,\n        payload: {\n          loading: false,\n          data: user,\n          errorMassage: false\n        }\n      });\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      const email = error.customData.email;\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    }).catch(error => {\n      console.log(\"3.gagal\");\n      dispatch({\n        type: GET_LOGIN_GOOGLE,\n        payload: {\n          loading: false,\n          data: false,\n          errorMassage: error\n        }\n      });\n    });\n  };\n};\nexport const googleUserLogin = () => {\n  const auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  console.log('2. loading masuk action');\n  return dispatch => {\n    // loading \n    dispatch({\n      type: GET_LOGIN_GOOGLE,\n      payload: {\n        loading: true,\n        data: false,\n        errorMassage: false\n      }\n    });\n    // get Api \n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      const user = result.user;\n      console.log('3. loading masuk action', user);\n      dispatch({\n        type: GET_LOGIN_GOOGLE,\n        payload: {\n          loading: false,\n          data: true,\n          errorMassage: false\n        }\n      });\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    }).catch(error => {\n      console.log(\"3.gagal\");\n      dispatch({\n        type: GET_LOGIN_GOOGLE,\n        payload: {\n          loading: false,\n          data: false,\n          errorMassage: error\n        }\n      });\n    });\n  };\n};\nexport const userRegis = data => {\n  const auth = getAuth();\n  console.log('2. loading masuk action');\n  return dispatch => {\n    // loading \n    dispatch({\n      type: GET_REGIS,\n      payload: {\n        loading: true,\n        data: false,\n        errorMassage: false\n      }\n    });\n    // get Api \n    createUserWithEmailAndPassword(auth, data.email, data.password, data.displayName).then(userCredential => {\n      // Signed in \n      const user = userCredential.user;\n      console.log(\"3.data masuk\");\n      dispatch({\n        type: GET_REGIS,\n        payload: {\n          loading: false,\n          data: user,\n          errorMassage: false\n        }\n      });\n      // ...\n    }).catch(error => {\n      console.log(\"3.gagal\");\n      dispatch({\n        type: GET_REGIS,\n        payload: {\n          loading: false,\n          data: false,\n          errorMassage: error\n        }\n      });\n    });\n  };\n};","map":{"version":3,"names":["getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","GoogleAuthProvider","signInWithPopup","GET_REGIS","GET_LOGIN","GET_LOGIN_GOOGLE","GET_REGIS_GOOGLE","userLogin","data","auth","console","log","dispatch","type","payload","loading","errorMassage","email","password","then","userCredential","user","catch","error","googleUserRegis","provider","result","credential","credentialFromResult","token","accessToken","errorCode","code","errorMessage","message","customData","credentialFromError","googleUserLogin","userRegis","displayName"],"sources":["C:/ola/latihan/latihan react/test-api/src/redux/action/loginAction.jsx"],"sourcesContent":["import { getAuth, createUserWithEmailAndPassword,signInWithEmailAndPassword ,GoogleAuthProvider,signInWithPopup } from \"firebase/auth\";\r\nexport const GET_REGIS = 'GET_REGIS'\r\nexport const GET_LOGIN = 'GET_LOGIN'\r\nexport const GET_LOGIN_GOOGLE = 'GET_LOGIN_GOOGLE'\r\nexport const GET_REGIS_GOOGLE = 'GET_REGIS_GOOGLE'\r\n\r\nexport  const userLogin = (data) => {\r\n    const auth = getAuth();\r\n    console.log('2. loading masuk action')\r\n    return (dispatch) => {\r\n        // loading \r\n        dispatch({\r\n            type: GET_LOGIN,\r\n            payload: {\r\n                loading: true,\r\n                data: false,\r\n                errorMassage: false\r\n            }\r\n        })\r\n        // get Api \r\n        signInWithEmailAndPassword(auth, data.email, data.password)\r\n        .then((userCredential) => {\r\n          // Signed in \r\n          const user = userCredential.user;\r\n          console.log(\"3.data masuk\",user)\r\n          dispatch({\r\n            type: GET_LOGIN,\r\n            payload: {\r\n                loading: false,\r\n                data: user,\r\n                errorMassage: false\r\n            }\r\n        })\r\n          // ...\r\n        })\r\n            .catch((error) => {\r\n                console.log(\"3.gagal\")\r\n                dispatch({\r\n                    type: GET_LOGIN,\r\n                    payload: {\r\n                        loading: false,\r\n                        data: false,\r\n                        errorMassage: error\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\nexport  const googleUserRegis = () => {\r\n    const auth = getAuth();\r\n    const provider = new GoogleAuthProvider();\r\n    console.log('2. loading masuk action')\r\n    return (dispatch) => {\r\n        // loading \r\n        dispatch({\r\n            type: GET_REGIS_GOOGLE,\r\n            payload: {\r\n                loading: true,\r\n                data: false,\r\n                errorMassage: false\r\n            }\r\n        })\r\n        // get Api \r\n        signInWithPopup(auth, provider)\r\n          .then((result) => {\r\n            const credential = GoogleAuthProvider.credentialFromResult(result);\r\n            const token = credential.accessToken;\r\n            const user = result.user;\r\n            dispatch({\r\n                type: GET_REGIS_GOOGLE,\r\n                payload: {\r\n                    loading: false,\r\n                    data: user,\r\n                    errorMassage: false\r\n                }\r\n            })\r\n          }).catch((error) => {\r\n            const errorCode = error.code;\r\n            const errorMessage = error.message;\r\n            const email = error.customData.email;\r\n            const credential = GoogleAuthProvider.credentialFromError(error);\r\n            // ...\r\n          })\r\n            .catch((error) => {\r\n                console.log(\"3.gagal\")\r\n                dispatch({\r\n                    type: GET_LOGIN_GOOGLE,\r\n                    payload: {\r\n                        loading: false,\r\n                        data: false,\r\n                        errorMassage: error\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\nexport  const googleUserLogin = () => {\r\n    const auth = getAuth();\r\n    const provider = new GoogleAuthProvider();\r\n    console.log('2. loading masuk action')\r\n    return (dispatch) => {\r\n        // loading \r\n        dispatch({\r\n            type: GET_LOGIN_GOOGLE,\r\n            payload: {\r\n                loading: true,\r\n                data: false,\r\n                errorMassage: false\r\n            }\r\n        })\r\n        // get Api \r\n        signInWithPopup(auth, provider)\r\n          .then((result) => {\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            const credential = GoogleAuthProvider.credentialFromResult(result);\r\n            const token = credential.accessToken;\r\n            const user = result.user;\r\n            console.log('3. loading masuk action',user)\r\n            dispatch({\r\n                type: GET_LOGIN_GOOGLE,\r\n                payload: {\r\n                    loading: false,\r\n                    data: true,\r\n                    errorMassage: false\r\n                }\r\n            })\r\n          }).catch((error) => {\r\n            // Handle Errors here.\r\n            const errorCode = error.code;\r\n            const errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            const email = error.customData.email;\r\n            // The AuthCredential type that was used.\r\n            const credential = GoogleAuthProvider.credentialFromError(error);\r\n            // ...\r\n          })\r\n            .catch((error) => {\r\n                console.log(\"3.gagal\")\r\n                dispatch({\r\n                    type: GET_LOGIN_GOOGLE,\r\n                    payload: {\r\n                        loading: false,\r\n                        data: false,\r\n                        errorMassage: error\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\nexport  const userRegis = (data) => {\r\n    const auth = getAuth();\r\n    console.log('2. loading masuk action')\r\n    return (dispatch) => {\r\n        // loading \r\n        dispatch({\r\n            type: GET_REGIS,\r\n            payload: {\r\n                loading: true,\r\n                data: false,\r\n                errorMassage: false\r\n            }\r\n        })\r\n        // get Api \r\n        createUserWithEmailAndPassword(auth, data.email, data.password,data.displayName)\r\n        .then((userCredential) => {\r\n          // Signed in \r\n          const user = userCredential.user;\r\n          console.log(\"3.data masuk\")\r\n          dispatch({\r\n            type: GET_REGIS,\r\n            payload: {\r\n                loading: false,\r\n                data: user,\r\n                errorMassage: false\r\n            }\r\n        })\r\n          // ...\r\n        })\r\n            .catch((error) => {\r\n                console.log(\"3.gagal\")\r\n                dispatch({\r\n                    type: GET_REGIS,\r\n                    payload: {\r\n                        loading: false,\r\n                        data: false,\r\n                        errorMassage: error\r\n                    }\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}