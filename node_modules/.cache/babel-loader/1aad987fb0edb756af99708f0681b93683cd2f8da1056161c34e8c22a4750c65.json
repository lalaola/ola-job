{"ast":null,"code":"var _jsxFileName = \"C:\\\\ola\\\\latihan\\\\latihan react\\\\test-api\\\\src\\\\component\\\\pagin\\\\index.jsx\";\nimport React from 'react';\nimport ReactPaginate from 'react-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Index = () => {\n  var _s = $RefreshSig$();\n  // Example items, to simulate fetching from another resources.\n  const items = [1, 2, 3, 4];\n  function Items(_ref) {\n    let {\n      currentItems\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Item #\", item]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }, this))\n    }, void 0, false);\n  }\n  function PaginatedItems(_ref2) {\n    _s();\n    let {\n      itemsPerPage\n    } = _ref2;\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n\n    // Simulate fetching items from another resources.\n    // (This could be items from props; or items loaded in a local state\n    // from an API endpoint with useEffect and useState)\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    const currentItems = items.slice(itemOffset, endOffset);\n    const pageCount = Math.ceil(items.length / itemsPerPage);\n\n    // Invoke when user click to request another page.\n    const handlePageClick = event => {\n      const newOffset = event.selected * itemsPerPage % items.length;\n      console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n      setItemOffset(newOffset);\n    };\n  }\n  _s(PaginatedItems, \"T5lRYnT7FeIRYhFW34vLrQET4eA=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","ReactPaginate","Index","items","Items","currentItems","map","item","PaginatedItems","itemsPerPage","itemOffset","setItemOffset","useState","endOffset","console","log","slice","pageCount","Math","ceil","length","handlePageClick","event","newOffset","selected"],"sources":["C:/ola/latihan/latihan react/test-api/src/component/pagin/index.jsx"],"sourcesContent":["import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst Index = () => {\r\n    // Example items, to simulate fetching from another resources.\r\n    const items = [1, 2, 3, 4];\r\n    function Items({ currentItems }) {\r\n        return (\r\n            <>\r\n                {currentItems &&\r\n                    currentItems.map((item) => (\r\n                        <div>\r\n                            <h3>Item #{item}</h3>\r\n                        </div>\r\n                    ))}\r\n            </>\r\n        );\r\n    }\r\n    function PaginatedItems({ itemsPerPage }) {\r\n        // Here we use item offsets; we could also use page offsets\r\n        // following the API or data you're working with.\r\n        const [itemOffset, setItemOffset] = useState(0);\r\n\r\n        // Simulate fetching items from another resources.\r\n        // (This could be items from props; or items loaded in a local state\r\n        // from an API endpoint with useEffect and useState)\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n        const currentItems = items.slice(itemOffset, endOffset);\r\n        const pageCount = Math.ceil(items.length / itemsPerPage);\r\n\r\n        // Invoke when user click to request another page.\r\n        const handlePageClick = (event) => {\r\n            const newOffset = (event.selected * itemsPerPage) % items.length;\r\n            console.log(\r\n                `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n            );\r\n            setItemOffset(newOffset);\r\n        };\r\n    }\r\n    return (\r\n        <>\r\n            <Items currentItems={currentItems} />\r\n            <ReactPaginate\r\n                breakLabel=\"...\"\r\n                nextLabel=\"next >\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={5}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< previous\"\r\n                renderOnZeroPageCount={null}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Index;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,gBAAgB;AAAC;AAAA;AAE3C,MAAMC,KAAK,GAAG,MAAM;EAAA;EAChB;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1B,SAASC,KAAK,OAAmB;IAAA,IAAlB;MAAEC;IAAa,CAAC;IAC3B,oBACI;MAAA,UACKA,YAAY,IACTA,YAAY,CAACC,GAAG,CAAEC,IAAI,iBAClB;QAAA,uBACI;UAAA,WAAI,QAAM,EAACA,IAAI;QAAA;UAAA;UAAA;UAAA;QAAA;MAAM;QAAA;QAAA;QAAA;MAAA,QAE5B;IAAC,iBACP;EAEX;EACA,SAASC,cAAc,QAAmB;IAAA;IAAA,IAAlB;MAAEC;IAAa,CAAC;IACpC;IACA;IACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;;IAE/C;IACA;IACA;IACA,MAAMC,SAAS,GAAGH,UAAU,GAAGD,YAAY;IAC3CK,OAAO,CAACC,GAAG,CAAE,sBAAqBL,UAAW,OAAMG,SAAU,EAAC,CAAC;IAC/D,MAAMR,YAAY,GAAGF,KAAK,CAACa,KAAK,CAACN,UAAU,EAAEG,SAAS,CAAC;IACvD,MAAMI,SAAS,GAAGC,IAAI,CAACC,IAAI,CAAChB,KAAK,CAACiB,MAAM,GAAGX,YAAY,CAAC;;IAExD;IACA,MAAMY,eAAe,GAAIC,KAAK,IAAK;MAC/B,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAQ,GAAGf,YAAY,GAAIN,KAAK,CAACiB,MAAM;MAChEN,OAAO,CAACC,GAAG,CACN,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAAC,CAC/E;MACDZ,aAAa,CAACY,SAAS,CAAC;IAC5B,CAAC;EACL;EAAC,GArBQf,cAAc;EAsBvB,oBACI;IAAA,wBACI,QAAC,KAAK;MAAC,YAAY,EAAEH;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eACrC,QAAC,aAAa;MACV,UAAU,EAAC,KAAK;MAChB,SAAS,EAAC,QAAQ;MAClB,YAAY,EAAEgB,eAAgB;MAC9B,kBAAkB,EAAE,CAAE;MACtB,SAAS,EAAEJ,SAAU;MACrB,aAAa,EAAC,YAAY;MAC1B,qBAAqB,EAAE;IAAK;MAAA;MAAA;MAAA;IAAA,QAC9B;EAAA,gBACH;AAEX,CAAC;AAAA,KAnDKf,KAAK;AAqDX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}